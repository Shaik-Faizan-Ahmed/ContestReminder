// Mocks generated by Mockito 5.4.6 from annotations
// in contest_reminder/test/features/contest_list/presentation/widgets/contest_card_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:contest_reminder/features/alarms/alarm_service.dart' as _i3;
import 'package:flutter_local_notifications/flutter_local_notifications.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFlutterLocalNotificationsPlugin_0 extends _i1.SmartFake
    implements _i2.FlutterLocalNotificationsPlugin {
  _FakeFlutterLocalNotificationsPlugin_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AlarmService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAlarmService extends _i1.Mock implements _i3.AlarmService {
  MockAlarmService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FlutterLocalNotificationsPlugin get flutterLocalNotificationsPlugin =>
      (super.noSuchMethod(
        Invocation.getter(#flutterLocalNotificationsPlugin),
        returnValue: _FakeFlutterLocalNotificationsPlugin_0(
          this,
          Invocation.getter(#flutterLocalNotificationsPlugin),
        ),
      ) as _i2.FlutterLocalNotificationsPlugin);

  @override
  _i4.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> scheduleAlarm(
    int? id,
    DateTime? scheduledTime,
    String? contestName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #scheduleAlarm,
          [
            id,
            scheduledTime,
            contestName,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> cancelAlarm(int? id) => (super.noSuchMethod(
        Invocation.method(
          #cancelAlarm,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.PendingNotificationRequest>> getPendingNotifications() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPendingNotifications,
          [],
        ),
        returnValue: _i4.Future<List<_i2.PendingNotificationRequest>>.value(
            <_i2.PendingNotificationRequest>[]),
      ) as _i4.Future<List<_i2.PendingNotificationRequest>>);

  @override
  _i4.Future<void> cancelAllAlarms() => (super.noSuchMethod(
        Invocation.method(
          #cancelAllAlarms,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
