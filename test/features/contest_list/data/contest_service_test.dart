import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:http/http.dart' as http;
import 'package:contest_reminder/features/contest_list/data/contest_service.dart';
import 'package:contest_reminder/features/contest_list/models/contest.dart';

import 'contest_service_test.mocks.dart'; // Generated by build_runner

@GenerateMocks([http.Client])
void main() {
  group('ContestService', () {
    late ContestService contestService;
    late MockClient mockClient;

    setUp(() {
      mockClient = MockClient();
      contestService = ContestService(mockClient);
    });

    test('returns a list of Contests if the http call completes successfully', () async {
      when(mockClient.get(any)).thenAnswer(
        (_) async => http.Response(
          '{"objects": [{"event": "Test Contest", "resource": "Codeforces", "start": "2026-01-01T00:00:00Z", "href": "http://test.com", "duration": 3600}]}',
          200,
        ),
      );

      final contests = await contestService.getUpcomingContests();

      expect(contests, isA<List<Contest>>());
      expect(contests.length, 1);
      expect(contests.first.name, 'Test Contest');
      expect(contests.first.platform, 'Codeforces');
      expect(contests.first.startTime, DateTime.parse('2026-01-01T00:00:00Z'));
      expect(contests.first.url, 'http://test.com');
      expect(contests.first.duration, '1h 0m');
    });

    test('throws an exception if the http call completes with an error', () async {
      when(mockClient.get(any)).thenAnswer(
        (_) async => http.Response('Not Found', 404),
      );

      expect(() => contestService.getUpcomingContests(), throwsException);
    });
  });
}
